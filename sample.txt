backend/
├── .env
├── server.js
├── models/
│   ├── Student.js
│   ├── Company.js
│   └── Application.js
├── routes/
│   ├── studentRoutes.js
│   ├── companyRoutes.js
│   └── applicationRoutes.js
├── controllers/
│   ├── studentController.js
│   ├── companyController.js
│   └── applicationController.js
└── config/
    └── db.js
frontend/
├── src/
│   ├── components/
│   │   ├── StudentRegistration.js
│   │   ├── Dashboard.js
│   │   └── InterviewSchedule.js
│   ├── pages/
│   │   ├── HomePage.js
│   │   └── CompanyPage.js
│   ├── utils/
│   │   └── api.js
│   ├── App.js
│   ├── index.css
│   ├── index.js
│   └── tailwind.config.js

Great! Let’s tackle this step-by-step. We’ll start by setting up the **backend** and **frontend** environments and then proceed to implement each feature module by module.

---

### Step 1: **Set Up Project Structure**

#### **Backend Setup**
1. Create a folder named `backend`.
2. Inside `backend`, initialize a Node.js project:
   ```bash
   mkdir backend
   cd backend
   npm init -y
   ```
3. Install necessary packages:
   ```bash
   npm install express mongoose cors dotenv body-parser nodemailer
   npm install --save-dev nodemon
   ```

4. Create the basic folder structure:
   ```
   backend/
   ├── .env
   ├── server.js
   ├── models/
   │   ├── Student.js
   │   ├── Company.js
   │   └── Application.js
   ├── routes/
   │   ├── studentRoutes.js
   │   ├── companyRoutes.js
   │   └── applicationRoutes.js
   ├── controllers/
   │   ├── studentController.js
   │   ├── companyController.js
   │   └── applicationController.js
   └── config/
       └── db.js
   ```

#### **Frontend Setup**
1. Create a folder named `frontend`.
2. Initialize a React project:
   ```bash
   npx create-react-app frontend
   cd frontend
   ```
3. Install TailwindCSS:
   ```bash
   npm install -D tailwindcss postcss autoprefixer
   npx tailwindcss init
   ```

4. Configure `tailwind.config.js`:
   ```javascript
   module.exports = {
     content: ['./src/**/*.{js,jsx,ts,tsx}'],
     theme: {
       extend: {},
     },
     plugins: [],
   };
   ```

5. Add Tailwind to your `src/index.css`:
   ```css
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   ```

---

### Step 2: **Develop Backend (Student Management Module)**

#### Backend Code
##### **`config/db.js`** (MongoDB Connection)
```javascript
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    const conn = await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log(`MongoDB Connected: ${conn.connection.host}`);
  } catch (error) {
    console.error(`Error: ${error.message}`);
    process.exit(1);
  }
};

module.exports = connectDB;
```

##### **`models/Student.js`** (Student Model)
```javascript
const mongoose = require('mongoose');

const studentSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  resume: { type: String, required: true },
  coverLetter: { type: String },
  applications: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Application' }],
});

module.exports = mongoose.model('Student', studentSchema);
```

##### **`routes/studentRoutes.js`**
```javascript
const express = require('express');
const {
  registerStudent,
  getStudents,
  getStudentById,
} = require('../controllers/studentController');
const router = express.Router();

router.post('/register', registerStudent);
router.get('/', getStudents);
router.get('/:id', getStudentById);

module.exports = router;
```

##### **`controllers/studentController.js`**
```javascript
const Student = require('../models/Student');

// Register a new student
const registerStudent = async (req, res) => {
  const { name, email, resume, coverLetter } = req.body;

  try {
    const student = await Student.create({ name, email, resume, coverLetter });
    res.status(201).json(student);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

// Get all students
const getStudents = async (req, res) => {
  try {
    const students = await Student.find();
    res.status(200).json(students);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Get a student by ID
const getStudentById = async (req, res) => {
  try {
    const student = await Student.findById(req.params.id);
    if (!student) {
      return res.status(404).json({ error: 'Student not found' });
    }
    res.status(200).json(student);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

module.exports = { registerStudent, getStudents, getStudentById };
```

##### **`server.js`**
```javascript
const express = require('express');
const dotenv = require('dotenv');
const cors = require('cors');
const bodyParser = require('body-parser');
const connectDB = require('./config/db');

// Routes
const studentRoutes = require('./routes/studentRoutes');

dotenv.config();
connectDB();

const app = express();

app.use(cors());
app.use(bodyParser.json());

// Routes
app.use('/api/students', studentRoutes);

const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

##### **`.env`**
```env
MONGO_URI=your_mongodb_connection_string
```

---

### Step 3: **Develop Frontend (Student Registration Form)**

1. Create a `StudentRegistration` component in `frontend/src/components/StudentRegistration.js`:
```javascript
import React, { useState } from 'react';
import axios from 'axios';

const StudentRegistration = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    resume: '',
    coverLetter: '',
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/api/students/register', formData);
      alert('Registration Successful!');
      console.log(response.data);
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <div className="p-6 bg-gray-100">
      <form onSubmit={handleSubmit} className="max-w-md mx-auto bg-white p-4 shadow-md rounded-md">
        <h1 className="text-xl font-bold mb-4">Student Registration</h1>
        <input
          type="text"
          name="name"
          placeholder="Name"
          value={formData.name}
          onChange={handleChange}
          className="mb-2 p-2 w-full border rounded"
        />
        <input
          type="email"
          name="email"
          placeholder="Email"
          value={formData.email}
          onChange={handleChange}
          className="mb-2 p-2 w-full border rounded"
        />
        <input
          type="text"
          name="resume"
          placeholder="Resume URL"
          value={formData.resume}
          onChange={handleChange}
          className="mb-2 p-2 w-full border rounded"
        />
        <textarea
          name="coverLetter"
          placeholder="Cover Letter"
          value={formData.coverLetter}
          onChange={handleChange}
          className="mb-2 p-2 w-full border rounded"
        />
        <button type="submit" className="bg-blue-500 text-white p-2 rounded">Register</button>
      </form>
    </div>
  );
};

export default StudentRegistration;
```

2. Import and display it in `App.js`:
```javascript
import React from 'react';
import StudentRegistration from './components/StudentRegistration';

function App() {
  return (
    <div className="App">
      <StudentRegistration />
    </div>
  );
}

export default App;
```

---

### Next Steps
1. Test the Student Registration feature.
2. We’ll proceed to **application management** and **company coordination** modules next.

Let me know when you're ready to move on!

Let’s focus on setting up the **frontend** with **React** and **TailwindCSS**, and building the core structure and initial components for your project. We'll also integrate with the backend as we progress.

---

### **Step 1: Set Up the React Project**
1. **Create the React App:**
   ```bash
   npx create-react-app frontend
   cd frontend
   ```

2. **Install TailwindCSS:**
   ```bash
   npm install -D tailwindcss postcss autoprefixer
   npx tailwindcss init
   ```

3. **Configure TailwindCSS:**
   Open the `tailwind.config.js` file and set the `content` property to include all the necessary files:
   ```javascript
   module.exports = {
     content: ['./src/**/*.{js,jsx,ts,tsx}'],
     theme: {
       extend: {},
     },
     plugins: [],
   };
   ```

4. **Add Tailwind to `src/index.css`:**
   Replace the contents of `src/index.css` with the following:
   ```css
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   ```

5. **Start the Development Server:**
   ```bash
   npm start
   ```
   This launches your React app at `http://localhost:3000`.

---

### **Step 2: Create the Project Folder Structure**
Organize your React project as follows:
```
frontend/
├── src/
│   ├── components/
│   │   ├── StudentRegistration.js
│   │   ├── Dashboard.js
│   │   └── InterviewSchedule.js
│   ├── pages/
│   │   ├── HomePage.js
│   │   └── CompanyPage.js
│   ├── utils/
│   │   └── api.js
│   ├── App.js
│   ├── index.css
│   ├── index.js
│   └── tailwind.config.js
```

---

### **Step 3: Build the UI Components**
We’ll start with the **Student Registration Form** and a **Dashboard**.

#### **Student Registration Component (`StudentRegistration.js`)**
This component lets students register their details (name, email, resume, and cover letter).

```javascript
import React, { useState } from 'react';
import axios from 'axios';

const StudentRegistration = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    resume: '',
    coverLetter: '',
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:5000/api/students/register', formData);
      alert('Registration Successful!');
      setFormData({ name: '', email: '', resume: '', coverLetter: '' });
    } catch (error) {
      console.error(error.message);
      alert('Error during registration. Please try again.');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <form onSubmit={handleSubmit} className="bg-white shadow-md rounded px-8 pt-6 pb-8 w-full max-w-md">
        <h2 className="text-2xl font-bold mb-4 text-center">Student Registration</h2>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2">Name</label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2">Email</label>
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2">Resume URL</label>
          <input
            type="url"
            name="resume"
            value={formData.resume}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            required
          />
        </div>
        <div className="mb-4">
          <label className="block text-gray-700 text-sm font-bold mb-2">Cover Letter</label>
          <textarea
            name="coverLetter"
            value={formData.coverLetter}
            onChange={handleChange}
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
          />
        </div>
        <button
          type="submit"
          className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
          Register
        </button>
      </form>
    </div>
  );
};

export default StudentRegistration;
```

---

#### **Dashboard Component (`Dashboard.js`)**
The dashboard provides an overview of student application statuses.

```javascript
import React from 'react';

const Dashboard = () => {
  // Mock data
  const applications = [
    { id: 1, job: 'Software Engineer', status: 'Shortlisted' },
    { id: 2, job: 'Data Analyst', status: 'Under Review' },
    { id: 3, job: 'Web Developer', status: 'Rejected' },
  ];

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <h1 className="text-3xl font-bold mb-6">Student Dashboard</h1>
      <div className="bg-white shadow-md rounded overflow-hidden">
        <table className="table-auto w-full">
          <thead>
            <tr className="bg-gray-200">
              <th className="px-4 py-2 text-left">Job Title</th>
              <th className="px-4 py-2 text-left">Status</th>
            </tr>
          </thead>
          <tbody>
            {applications.map((app) => (
              <tr key={app.id} className="border-t">
                <td className="px-4 py-2">{app.job}</td>
                <td className={`px-4 py-2 ${app.status === 'Rejected' ? 'text-red-500' : 'text-green-500'}`}>
                  {app.status}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Dashboard;
```

---

### **Step 4: Update App.js**
Replace the contents of `App.js` with the following:
```javascript
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import StudentRegistration from './components/StudentRegistration';
import Dashboard from './components/Dashboard';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<StudentRegistration />} />
        <Route path="/dashboard" element={<Dashboard />} />
      </Routes>
    </Router>
  );
}

export default App;
```

---

### **Step 5: Test Your Application**
1. Run the frontend:
   ```bash
   npm start
   ```
2. Test the **Student Registration** form and check if it successfully posts data to the backend.
3. Visit `/dashboard` to view the mock application data.

---

### Next Steps:
1. Integrate with the backend to fetch real-time application data for the dashboard.
2. Add components for **Company Coordination** and **Interview Scheduling**.

Let me know how it’s going or if you’d like to dive deeper into any module!

Let’s build out the **backend** and **frontend** code for the **Application Management** and **Company Management** modules. Below, I will provide detailed code for each feature, including the backend API, models, and controllers, followed by the frontend components for handling applications and companies.

---

### **Backend Code**

#### **Application Management**
1. **Application Model (`models/Application.js`)**  
   Define the schema for job applications.

   ```javascript
   const mongoose = require('mongoose');

   const applicationSchema = new mongoose.Schema({
     student: { type: mongoose.Schema.Types.ObjectId, ref: 'Student', required: true },
     company: { type: mongoose.Schema.Types.ObjectId, ref: 'Company', required: true },
     jobTitle: { type: String, required: true },
     status: { type: String, enum: ['Submitted', 'Reviewed', 'Shortlisted', 'Rejected'], default: 'Submitted' },
     appliedAt: { type: Date, default: Date.now },
   });

   module.exports = mongoose.model('Application', applicationSchema);
   ```

2. **Application Controller (`controllers/applicationController.js`)**

   ```javascript
   const Application = require('../models/Application');

   // Create a new application
   const createApplication = async (req, res) => {
     const { student, company, jobTitle } = req.body;

     try {
       const application = await Application.create({ student, company, jobTitle });
       res.status(201).json(application);
     } catch (error) {
       res.status(400).json({ error: error.message });
     }
   };

   // Get all applications
   const getApplications = async (req, res) => {
     try {
       const applications = await Application.find()
         .populate('student', 'name email')
         .populate('company', 'name');
       res.status(200).json(applications);
     } catch (error) {
       res.status(500).json({ error: error.message });
     }
   };

   // Update application status
   const updateApplicationStatus = async (req, res) => {
     const { id } = req.params;
     const { status } = req.body;

     try {
       const application = await Application.findByIdAndUpdate(
         id,
         { status },
         { new: true }
       );
       if (!application) {
         return res.status(404).json({ error: 'Application not found' });
       }
       res.status(200).json(application);
     } catch (error) {
       res.status(500).json({ error: error.message });
     }
   };

   module.exports = { createApplication, getApplications, updateApplicationStatus };
   ```

3. **Application Routes (`routes/applicationRoutes.js`)**

   ```javascript
   const express = require('express');
   const {
     createApplication,
     getApplications,
     updateApplicationStatus,
   } = require('../controllers/applicationController');
   const router = express.Router();

   router.post('/', createApplication);
   router.get('/', getApplications);
   router.patch('/:id/status', updateApplicationStatus);

   module.exports = router;
   ```

---

#### **Company Management**
1. **Company Model (`models/Company.js`)**

   ```javascript
   const mongoose = require('mongoose');

   const companySchema = new mongoose.Schema({
     name: { type: String, required: true },
     email: { type: String, required: true, unique: true },
     jobOpenings: [{ type: String }],
     contactNumber: { type: String },
   });

   module.exports = mongoose.model('Company', companySchema);
   ```

2. **Company Controller (`controllers/companyController.js`)**

   ```javascript
   const Company = require('../models/Company');

   // Create a new company
   const createCompany = async (req, res) => {
     const { name, email, jobOpenings, contactNumber } = req.body;

     try {
       const company = await Company.create({ name, email, jobOpenings, contactNumber });
       res.status(201).json(company);
     } catch (error) {
       res.status(400).json({ error: error.message });
     }
   };

   // Get all companies
   const getCompanies = async (req, res) => {
     try {
       const companies = await Company.find();
       res.status(200).json(companies);
     } catch (error) {
       res.status(500).json({ error: error.message });
     }
   };

   module.exports = { createCompany, getCompanies };
   ```

3. **Company Routes (`routes/companyRoutes.js`)**

   ```javascript
   const express = require('express');
   const { createCompany, getCompanies } = require('../controllers/companyController');
   const router = express.Router();

   router.post('/', createCompany);
   router.get('/', getCompanies);

   module.exports = router;
   ```

---

#### **Update `server.js`**
Add the routes for applications and companies:
```javascript
const applicationRoutes = require('./routes/applicationRoutes');
const companyRoutes = require('./routes/companyRoutes');

app.use('/api/applications', applicationRoutes);
app.use('/api/companies', companyRoutes);
```

---

### **Frontend Code**

#### **Application List Component (`ApplicationList.js`)**
Displays all applications for admin or student view.

```javascript
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const ApplicationList = () => {
  const [applications, setApplications] = useState([]);

  useEffect(() => {
    const fetchApplications = async () => {
      const response = await axios.get('http://localhost:5000/api/applications');
      setApplications(response.data);
    };

    fetchApplications();
  }, []);

  return (
    <div className="p-6 bg-gray-100">
      <h1 className="text-2xl font-bold mb-4">Applications</h1>
      <div className="bg-white shadow-md rounded">
        <table className="table-auto w-full">
          <thead>
            <tr className="bg-gray-200">
              <th className="px-4 py-2">Job Title</th>
              <th className="px-4 py-2">Student</th>
              <th className="px-4 py-2">Company</th>
              <th className="px-4 py-2">Status</th>
            </tr>
          </thead>
          <tbody>
            {applications.map((app) => (
              <tr key={app._id} className="border-t">
                <td className="px-4 py-2">{app.jobTitle}</td>
                <td className="px-4 py-2">{app.student.name}</td>
                <td className="px-4 py-2">{app.company.name}</td>
                <td className="px-4 py-2">{app.status}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ApplicationList;
```

---

#### **Company List Component (`CompanyList.js`)**
Displays a list of companies and their job openings.

```javascript
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const CompanyList = () => {
  const [companies, setCompanies] = useState([]);

  useEffect(() => {
    const fetchCompanies = async () => {
      const response = await axios.get('http://localhost:5000/api/companies');
      setCompanies(response.data);
    };

    fetchCompanies();
  }, []);

  return (
    <div className="p-6 bg-gray-100">
      <h1 className="text-2xl font-bold mb-4">Companies</h1>
      <div className="bg-white shadow-md rounded">
        <table className="table-auto w-full">
          <thead>
            <tr className="bg-gray-200">
              <th className="px-4 py-2">Company Name</th>
              <th className="px-4 py-2">Email</th>
              <th className="px-4 py-2">Contact Number</th>
              <th className="px-4 py-2">Job Openings</th>
            </tr>
          </thead>
          <tbody>
            {companies.map((company) => (
              <tr key={company._id} className="border-t">
                <td className="px-4 py-2">{company.name}</td>
                <td className="px-4 py-2">{company.email}</td>
                <td className="px-4 py-2">{company.contactNumber}</td>
                <td className="px-4 py-2">{company.jobOpenings.join(', ')}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default CompanyList;
```

---

### **Add Routes to `App.js`**
```javascript
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import ApplicationList from './components/ApplicationList';
import CompanyList from './components/CompanyList';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/applications" element={<ApplicationList />} />
        <Route path="/companies" element={<CompanyList />} />
      </Routes>
    </Router>
  );
}

export default App;
```

---

### Next Steps:
1. Test the APIs and ensure frontend components fetch and display data correctly.
2. Add forms for adding companies and applications if needed.

Let me know when you

’re ready for more!

Here is the **utils/api.js** file for handling API requests. I will now provide the React components for the Interview Schedule, Company Page, and Homepage.

---

### **Interview Schedule Component (`InterviewSchedule.js`)**

```javascript
import React, { useEffect, useState } from 'react';
import { fetchInterviewSchedules, createInterviewSchedule } from '../utils/api';

const InterviewSchedule = () => {
  const [schedules, setSchedules] = useState([]);
  const [newSchedule, setNewSchedule] = useState({ student: '', company: '', time: '' });

  useEffect(() => {
    const loadSchedules = async () => {
      const data = await fetchInterviewSchedules();
      setSchedules(data);
    };
    loadSchedules();
  }, []);

  const handleCreateSchedule = async () => {
    const createdSchedule = await createInterviewSchedule(newSchedule);
    setSchedules([...schedules, createdSchedule]);
    setNewSchedule({ student: '', company: '', time: '' });
  };

  return (
    <div className="p-6 bg-gray-100">
      <h1 className="text-2xl font-bold mb-4">Interview Schedules</h1>
      <div className="mb-6">
        <input
          type="text"
          placeholder="Student"
          value={newSchedule.student}
          onChange={(e) => setNewSchedule({ ...newSchedule, student: e.target.value })}
          className="border p-2 mr-2"
        />
        <input
          type="text"
          placeholder="Company"
          value={newSchedule.company}
          onChange={(e) => setNewSchedule({ ...newSchedule, company: e.target.value })}
          className="border p-2 mr-2"
        />
        <input
          type="datetime-local"
          value={newSchedule.time}
          onChange={(e) => setNewSchedule({ ...newSchedule, time: e.target.value })}
          className="border p-2 mr-2"
        />
        <button
          onClick={handleCreateSchedule}
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          Schedule Interview
        </button>
      </div>
      <table className="table-auto w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200">
            <th className="px-4 py-2">Student</th>
            <th className="px-4 py-2">Company</th>
            <th className="px-4 py-2">Time</th>
          </tr>
        </thead>
        <tbody>
          {schedules.map((schedule) => (
            <tr key={schedule._id} className="border-t">
              <td className="px-4 py-2">{schedule.student}</td>
              <td className="px-4 py-2">{schedule.company}</td>
              <td className="px-4 py-2">{new Date(schedule.time).toLocaleString()}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default InterviewSchedule;
```

---

### **Company Page Component (`CompanyPage.js`)**

```javascript
import React, { useEffect, useState } from 'react';
import { fetchCompanies } from '../utils/api';

const CompanyPage = () => {
  const [companies, setCompanies] = useState([]);

  useEffect(() => {
    const loadCompanies = async () => {
      const data = await fetchCompanies();
      setCompanies(data);
    };
    loadCompanies();
  }, []);

  return (
    <div className="p-6 bg-gray-100">
      <h1 className="text-2xl font-bold mb-4">Companies</h1>
      <table className="table-auto w-full bg-white shadow-md rounded">
        <thead>
          <tr className="bg-gray-200">
            <th className="px-4 py-2">Name</th>
            <th className="px-4 py-2">Email</th>
            <th className="px-4 py-2">Contact Number</th>
            <th className="px-4 py-2">Job Openings</th>
          </tr>
        </thead>
        <tbody>
          {companies.map((company) => (
            <tr key={company._id} className="border-t">
              <td className="px-4 py-2">{company.name}</td>
              <td className="px-4 py-2">{company.email}</td>
              <td className="px-4 py-2">{company.contactNumber}</td>
              <td className="px-4 py-2">{company.jobOpenings.join(', ')}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CompanyPage;
```

---

### **Homepage Component (`Homepage.js`)**

```javascript
import React from 'react';
import { Link } from 'react-router-dom';

const Homepage = () => {
  return (
    <div className="h-screen flex flex-col items-center justify-center bg-gray-100">
      <h1 className="text-4xl font-bold mb-6">College Placement Management System</h1>
      <div className="space-y-4">
        <Link
          to="/applications"
          className="block bg-blue-500 text-white px-6 py-3 rounded shadow hover:bg-blue-600"
        >
          View Applications
        </Link>
        <Link
          to="/companies"
          className="block bg-green-500 text-white px-6 py-3 rounded shadow hover:bg-green-600"
        >
          View Companies
        </Link>
        <Link
          to="/interviews"
          className="block bg-purple-500 text-white px-6 py-3 rounded shadow hover:bg-purple-600"
        >
          Manage Interview Schedules
        </Link>
      </div>
    </div>
  );
};

export default Homepage;
```

---

### **Add Routes in `App.js`**

```javascript
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Homepage from './components/Homepage';
import ApplicationList from './components/ApplicationList';
import CompanyPage from './components/CompanyPage';
import InterviewSchedule from './components/InterviewSchedule';

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Homepage />} />
        <Route path="/applications" element={<ApplicationList />} />
        <Route path="/companies" element={<CompanyPage />} />
        <Route path="/interviews" element={<InterviewSchedule />} />
      </Routes>
    </Router>
  );
}

export default App;
```

Let me know if you need any further enhancements or deployment instructions!